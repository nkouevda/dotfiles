[core]
	# This is the same as git's default if LESS is empty (`LESS=FRX less`),
	# but since LESS is not empty, we need to explicitly set this
	pager = less --quit-if-one-screen --Raw-control-chars --no-init

[init]
	defaultBranch = main

[log]
	date = iso
	decorate = false

[tag]
	sort = version:refname

[grep]
	lineNumber = true
	patternType = extended

[diff]
	algorithm = patience
	colorMoved = true
	renames = copies
	wsErrorHighlight = all

[difftool]
	prompt = false
	trustExitCode = true

[difftool "pdiff"]
	cmd = "pdiff -- \"$LOCAL\" \"$REMOTE\" | less --Raw-control-chars"

[merge]
	conflictStyle = diff3
	tool = vimdiff

[am]
	threeWay = true

[fetch]
	prune = true

[pull]
	rebase = true

[push]
	default = upstream

[advice]
	addEmptyPathspec = false
	detachedHead = false
	skippedCherryPicks = false
	statusHints = false
	waitingForEditor = false

[color "status"]
	branch = cyan

[pretty]
	compact = "%C(auto)%h %C(blue)%ad %C(magenta)%aN %C(reset)%s"
	compact-decorate = "%C(auto)%h %C(blue)%ad %C(magenta)%aN%C(auto)%d %C(reset)%s"
	compact-committer = "%C(auto)%h %C(blue)%cd %C(magenta)%aN %C(reset)%s"
	compact-committer-decorate = "%C(auto)%h %C(blue)%cd %C(magenta)%aN%C(auto)%d %C(reset)%s"

[format]
	pretty = fuller

[alias]
	st = status
	sts = status --short --branch
	rp = "!f() { git rev-parse \"${@:-HEAD}\"; }; f"
	rpa = "!f() { git rev-parse --abbrev-ref \"${@:-HEAD}\"; }; f"
	root = rev-parse --show-toplevel
	prefix = rev-parse --show-prefix
	# main branch, which might not be called main; default to main
	main = "!f() { { git rpa --verify --quiet \"${1:-origin}/HEAD\" || echo main; } | cut -d / -f 2; }; f"
	br = branch
	brv = branch --verbose --verbose
	brc = branch --sort=committerdate
	brcv = branch --sort=committerdate --verbose --verbose
	bra = branch --all
	brav = branch --all --verbose --verbose
	brac = branch --all --sort=committerdate
	bracv = branch --all --sort=committerdate --verbose --verbose
	brf = branch --force
	brfm = "!f() { local main=\"$(git main)\"; git branch --force \"$main\" \"${1:-origin}/$main\"; }; f"
	brm = branch --move
	brmf = branch --move --force
	brd = branch --delete
	brdf = branch --delete --force
	track = "!f() { git branch --set-upstream-to \"${1:-origin}/$(git rpa)\"; }; f"
	untrack = branch --unset-upstream
	pushup = "!f() { git push --set-upstream \"${1:-origin}\" \"$(git rpa)\"; }; f"
	deleteup = "!f() { git push --delete \"${1:-origin}\" \"$(git rpa)\"; }; f"
	sb = show-branch
	sba = show-branch --all
	mb = merge-base
	mbm = "!f() { git merge-base \"$(git main)\" \"${@:-HEAD}\"; }; f"
	sc = show --compact-summary
	lg = log --pretty=compact
	lgm = "!f() { git log --pretty=compact ^\"$(git main)\" \"${@:-HEAD}\"; }; f"
	lga = "!bash -c 'git log --pretty=compact --author=\"${1:?missing <author>}\" \"${@:2}\"' -"
	lgau = "!f() { git log --pretty=compact --author=\"$(git config --get user.email)\" \"$@\"; }; f"
	lgd = log --pretty=compact-decorate
	lgdm = "!f() { git log --pretty=compact-decorate ^\"$(git main)\" \"${@:-HEAD}\"; }; f"
	lgs = log --compact-summary
	lgsm = "!f() { git log --compact-summary ^\"$(git main)\" \"${@:-HEAD}\"; }; f"
	lgsa = "!bash -c 'git log --compact-summary --author=\"${1:?missing <author>}\" \"${@:2}\"' -"
	lgsau = "!f() { git log --compact-summary --author=\"$(git config --get user.email)\" \"$@\"; }; f"
	rlg = reflog --pretty=compact-committer
	rlgd = reflog --pretty=compact-committer-decorate
	df = diff
	dfc = diff --cached
	df1 = "!f() { git diff \"${1:-HEAD}\"^ \"${@:-HEAD}\"; }; f"
	dfm = "!f() { git diff \"$(git mbm \"${1:-HEAD}\")\" \"$@\"; }; f"
	dfn = diff --name-only
	dfnc = diff --name-only --cached
	dfn1 = "!f() { git diff --name-only \"${1:-HEAD}\"^ \"${@:-HEAD}\"; }; f"
	dfnm = "!f() { git diff --name-only \"$(git mbm \"${1:-HEAD}\")\" \"$@\"; }; f"
	dfs = diff --compact-summary
	dfsc = diff --compact-summary --cached
	dfs1 = "!f() { git diff --compact-summary \"${1:-HEAD}\"^ \"${@:-HEAD}\"; }; f"
	dfsm = "!f() { git diff --compact-summary \"$(git mbm \"${1:-HEAD}\")\" \"$@\"; }; f"
	dfp = difftool --tool=pdiff
	dfpc = difftool --tool=pdiff --cached
	dfp1 = "!f() { git difftool --tool=pdiff \"${1:-HEAD}\"^ \"${@:-HEAD}\"; }; f"
	dfpm = "!f() { git difftool --tool=pdiff \"$(git mbm \"${1:-HEAD}\")\" \"$@\"; }; f"
	dfz = "!f() { q_args=\"$(printf '%q ' \"$@\")\"; git dfn \"$@\" -z | fzf --read0 --bind \"enter:execute(git dfp $q_args {})\"; }; f"
	dfzc = "!f() { q_args=\"$(printf '%q ' \"$@\")\"; git dfnc \"$@\" -z | fzf --read0 --bind \"enter:execute(git dfpc $q_args {})\"; }; f"
	dfz1 = "!f() { q_args=\"$(printf '%q ' \"${@:-HEAD}\")\"; git dfn1 \"${@:-HEAD}\" -z | fzf --read0 --bind \"enter:execute(git dfp1 $q_args {})\"; }; f"
	dfzm = "!f() { q_args=\"$(printf '%q ' \"${@:-HEAD}\")\"; git dfnm \"${@:-HEAD}\" -z | fzf --read0 --bind \"enter:execute(git dfpm $q_args {})\"; }; f"
	rmc = rm --cached
	rmcf = rm --cached --force
	ci = commit
	ca = commit --amend
	can = commit --amend --no-edit
	canr = commit --amend --no-edit --reset-author
	co = checkout
	cob = checkout -b
	cobf = checkout -B
	cod = checkout --detach
	com = "!f() { git checkout \"$(git main)\" \"$@\"; }; f"
	cor = "!f() { git checkout -B \"${1:?missing <branch>}\" \"${2:-origin}/$1\"; }; f"
	corm = "!f() { local main=\"$(git main)\"; git checkout -B \"$main\" \"${1:-origin}/$main\"; }; f"
	hard = "!f() { git reset --hard \"${@:-HEAD}\"; }; f"
	soft = "!f() { git reset --soft \"${@:-HEAD}\"; }; f"
	cp = cherry-pick
	cpc = cherry-pick --continue
	cpa = cherry-pick --abort
	amc = am --continue
	ama = am --abort
	rb = rebase
	rbm = "!f() { git rebase \"$(git main)\" \"$@\"; }; f"
	rbi = rebase --interactive
	rbim = "!f() { git rebase --interactive \"$(git main)\" \"$@\"; }; f"
	rbimbm = "!f() { git rebase --interactive \"$(git mbm)\"; }; f"
	rbir = rebase --interactive --root
	rbo = rebase --onto
	rbo1 = "!bash -c 'git rebase --onto \"${1:?missing <newbase>}\" \"${2:?missing <upstream>}\"^ \"${@:2}\"' -"
	rbom = "!f() { git rebase --onto \"$(git main)\" \"$@\"; }; f"
	rbom1 = "!f() { git rebase --onto \"$(git main)\" \"${1:?missing <upstream>}\"^ \"$@\"; }; f"
	rbc = rebase --continue
	rbs = rebase --skip
	rba = rebase --abort
	xdn = clean -xd --dry-run
	xdnt = clean -xd --dry-run --exclude=tags --exclude=tags-metadata
	xdf = clean -xd --force
	xdft = clean -xd --force --exclude=tags --exclude=tags-metadata
	rt = remote
	rtv = remote --verbose
	fe = fetch --all --tags
	pl = pull --all --tags
	plm = "!f() { git pl; [[ \"$(git rpa)\" != \"$(git main)\" ]] && git brfm; }; f"
	cloneghs = "!f() { git clone \"git@github.com:${1:?missing <author/repo>}.git\"; }; f"
	cloneghh = "!f() { git clone \"https://github.com/${1:?missing <author/repo>}.git\"; }; f"
	gca = -c gc.reflogExpire=now -c gc.reflogExpireUnreachable=now gc --aggressive --prune=now
	trace = "!f() { GIT_TRACE=1 git \"$@\"; }; f"

[include]
	path = ~/.config/git/config.local
