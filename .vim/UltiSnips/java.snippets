snippet pr "private" w
private $0
endsnippet

snippet po "protected" w
protected $0
endsnippet

snippet pu "public" w
public $0
endsnippet

snippet st "static" w
static $0
endsnippet

snippet fi "final" w
final $0
endsnippet

snippet if "if" b
if ($1) {
	$2
}
endsnippet

snippet /(?<!\w)else if/ "else if" r
else if ($1) {
	$2
}
endsnippet

snippet else "else" w
else {
	$1
}
endsnippet

snippet for "for" b
for ($1) {
	$2
}
endsnippet

snippet while "while" b
while ($1) {
	$2
}
endsnippet

snippet try "try" b
try {
	$1
} catch (${2:Exception} as e) {
	${4:logger.error(e, $5);}
}
endsnippet

snippet finally "finally" w
finally {
	$1
}
endsnippet

snippet logger "logger" b
private static final Logger logger = Logger.get(`!v expand('%:t:r')`.class);
endsnippet

snippet debug "logger.debug()" b
logger.debug($1);
endsnippet

snippet info "logger.info()" b
logger.info($1);
endsnippet

snippet warning "logger.warning()" b
logger.warning($1);
endsnippet

snippet error "logger.error()" b
logger.error($1);
endsnippet

snippet equals "equals (singleton)" b
@Override
public boolean equals(Object o) {
	return o instanceof `!v expand('%:t:r')`;
}
endsnippet

snippet /hash[Cc]ode/ "hashCode (singleton)" rb
@Override
public int hashCode() {
	return getClass().hashCode();
}
endsnippet
