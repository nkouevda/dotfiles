snippet #! "#!" b
#!/usr/bin/env python
endsnippet

snippet from "from" b
from ${1:module} import $0
endsnippet

snippet main "main" b
if __name__ == '__main__':
	${1:main()}
endsnippet

snippet class "class" b
class ${1:name}(${2:object}):

	def __init__(self, ${3:params}):
		${4:super($1, self).__init__(${5:$3})}
endsnippet

snippet /(?<!\w)\./ "self." r
self.
endsnippet

snippet /(?<!\w)__?/ "__magic__" r
__${1:init}__
endsnippet

snippet def "def" b
def ${1:name}(${2:params}) -> ${3:None}:
	${4:pass}
endsnippet

snippet lambda "lambda" w
lambda ${1:params}: ${2:pass}
endsnippet

snippet doc "docstring" b
"""${1:TODO}
"""
endsnippet

snippet /"""/ "triple double quotes" r
"""$1"""
endsnippet

snippet /'''/ "triple single quotes" r
'''$1'''
endsnippet

snippet if "if" b
if ${1:condition}:
	${2:pass}
endsnippet

snippet elif "elif" b
elif ${1:condition}:
	${2:pass}
endsnippet

snippet else "else" b
else:
	${1:pass}
endsnippet

snippet for "for" b
for ${1:item} in ${2:iterable}:
	${3:pass}
endsnippet

snippet while "while" b
while ${1:condition}:
	${2:pass}
endsnippet

snippet /list|\[/ "list" r
[${1:item} for ${2:$1} in ${3:iterable}${4: if ${5:condition}}]
endsnippet

snippet tuple "tuple" w
tuple(${1:item} for ${2:$1} in ${3:iterable}${4: if ${5:condition}})
endsnippet

snippet set "set" w
{${1:item} for ${2:$1} in ${3:iterable}${4: if ${5:condition}}}
endsnippet

snippet /dict|\{/ "dict" r
{${1:key}: ${2:value} for ${3:$1}, ${4:$2} in ${5:iterable}${6: if ${7:condition}}}
endsnippet

snippet try "try" b
try:
	${1:pass}
except ${2:Exception} as ${3:ex}:
	${4:pass}
endsnippet

snippet finally "finally" b
finally:
	${1:pass}
endsnippet

snippet with "with" b
with ${1:item} as ${2:identifier}:
	${3:pass}
endsnippet

snippet open "open" b
with open(${1:file}, '${2:r}') as ${3:identifier}:
	${4:pass}
endsnippet

snippet /(?<!\w)isinst(ance)?/ "isinstance" r
isinstance(${1:identifier}, ${2:cls})
endsnippet

snippet /(?<!\w)issub(class)?/ "issubclass" r
issubclass(${1:cls}, ${2:supercls})
endsnippet

snippet /(?<!\w)re\.?/ "re" r
re.${1:search}(r'${2:pattern}', ${3:string})
endsnippet

snippet printf "print f-string" w
print(f'$1')
endsnippet

snippet f "f-string" w
f'$1'
endsnippet

snippet /=/ "f-string {var=}" r
{$1=}
endsnippet

snippet /bp|breakpoint/ "breakpoint" rb
breakpoint()
endsnippet

snippet pdb "pdb" b
import pdb
pdb.set_trace()
endsnippet

snippet ipdb "ipdb" b
import ipdb
ipdb.set_trace()
endsnippet
