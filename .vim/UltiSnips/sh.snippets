snippet #! "#!" b
#!/usr/bin/env ${1:bash}
endsnippet

snippet strict "strict" b
set -euo pipefail
endsnippet

snippet /(#\s*)?(shellcheck|sc|disable)/ "shellcheck" rb
# shellcheck disable=
endsnippet

snippet /\w+\(\)/ "function" rb
`!p snip.rv = match.group()` {
	$1
}
endsnippet

snippet if "if" b
if ${1:[[ ${2:expression} ]]}; then
	$3
fi
endsnippet

snippet elif "elif" b
elif ${1:[[ ${2:expression} ]]}; then
	$3
endsnippet

snippet else "else" b
else
	$0
endsnippet

snippet while "while" b
while ${1:[[ ${2:expression} ]]}; do
	$3
done
endsnippet

snippet read "read" b
while read -r $1; do
  $3
done < $2
endsnippet

snippet for "for" b
for ${1:i} in "${2:$@}"; do
	$3
done
endsnippet

snippet /\[\[/ "[[" r
[[ ${1:expression} ]] && $0
endsnippet

snippet source "source"
[[ -r ${1:file} ]] && source $1
endsnippet

snippet /\$/ "parameter expansion" r
\${$1}
endsnippet

snippet /@/ "array expansion" r
\${$1[@]}
endsnippet

snippet /printf?/ "printf" rb
printf "%s\n" "$1"
endsnippet

snippet /(std)?err/ "printf >&2" rb
printf "%s\n" "$1" >&2
endsnippet

snippet usage "usage" b
usage() {
	cat <<EOF
usage: ${1:name} [<options>] [--] ${2:args}

${3:description}

Options:
		-h, --help
				Show this help message and exit.
EOF
}
endsnippet

snippet /opt(ion)?s/ "options" rb
while (( $# )); do
	case "\$1" in
		-h|--help)
			usage
			exit
			;;
		--)
			shift
			break
			;;
		-*)
			printf "error: invalid option: %s\n" "\$1" >&2
			exit 1
			;;
		*)
			break
			;;
	esac

	shift
done
endsnippet

snippet args "function args" b
if (( ! \$# )); then
	printf "usage: %s <$1>\n" "\${FUNCNAME[0]}" >&2
	return 1
fi
endsnippet

snippet args "script args" b
if (( ! $# )); then
	usage
	exit 1
fi
endsnippet
