" Disable vi compatibility when overriding default vimrc via -u
set nocompatible

" Instead of ~/.viminfo
set viminfofile=~/.vim/viminfo

" Do not use backup files in /private/tmp (fixes crontab editing in OS X)
set backupskip+=/private/tmp/*

" Place all swap files in one location; trailing // ensures uniqueness
set directory^=~/.vim/swap//

" Hide abandoned buffers instead of unloading them
set hidden

" Automatically read files changed outside of vim
set autoread

" Enable mouse in all modes
set mouse=a

" Shorten all file messages; do not display the intro message
set shortmess+=aI

" Save more command-line history
set history=1000

" Search for tags files upward from the current file
set tags^=./tags;

" Match tag case
set tagcase=match

" Ignore temporary and output files
set wildignore+=*.class,*.o,*.out,*.pyc,*.swp,*~

" Complete to the longest common prefix first, then list all completions
set wildmode=longest,list

" Always report the number of lines changed by a command
set report=0

" Show partial commands
set showcmd

" Split below/right instead of above/left
set splitbelow splitright

" Never show ruler; always show status line
set noruler laststatus=2

" File name; flags (modified, read-only, help, preview); filetype
set statusline=%t%m%r%h%w\ %y%{&ft!=''?'\ ':''}
" File format; file encoding; noeol; truncate right; switch to right alignment
set statusline+=[%{&ff},%{&fenc!=''?&fenc:&enc}]%{&eol?'':'\ [noeol]'}\ %<%=
" Character under cursor in hexadecimal
set statusline+=[0x%02B]
" `[line/total]`
set statusline+=\ [%l/%L]
" `[col/width]` or `[col/width(virtcol/virtwidth)]`
set statusline+=\ [%c/%{strwidth(getline('.'))}
set statusline+=%{strwidth(getline('.'))!=strdisplaywidth(getline('.'))?'('.virtcol('.').'/'.strdisplaywidth(getline('.')).')':''}]

" Show line numbers
set number

if exists('+relativenumber')
  " Use relative line numbers
  set relativenumber
endif

" Display parts of wrapped lines that are cut off at the bottom
set display=lastline

" Do not split words when wrapping long lines
set linebreak

" Default to 2 spaces per tab
set shiftwidth=2 expandtab smarttab

" Round to the nearest tab when indenting; copy indentation exactly
set shiftround autoindent copyindent

" Use the system clipboard
if has('clipboard')
  if has('unnamedplus')
    set clipboard=unnamedplus
  else
    set clipboard=unnamed
  endif
endif

" Default to `#%s` comments, not `/*%s*/`
set commentstring=#%s

" Add `tab:>_` and `trail:<`
set listchars=eol:$,tab:>_,trail:<

" Always allow backspacing
set backspace=indent,eol,start

" Do not automatically add EOL at EOF
set nofixeol

" Insert 1 space (not 2) between sentences when joining
set nojoinspaces

" Do not move the cursor to the first non-blank when jumping
set nostartofline

" Search incrementally; highlight matches; ignore case iff all lowercase
set incsearch hlsearch ignorecase smartcase

" Colors in :terminal
set termguicolors

" Do not time out on mappings; time out immediately on key codes
set notimeout ttimeout ttimeoutlen=0

" Delay before writing the swap file, and before updating `airblade/vim-gitgutter` signs
set updatetime=100

" Leader
let mapleader = "\<Space>"

" Swap {j,k} with g{j,k}
nnoremap <expr> j v:count ? 'j' : 'gj'
xnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'
xnoremap <expr> k v:count ? 'k' : 'gk'
nnoremap gj j
xnoremap gj j
nnoremap gk k
xnoremap gk k

" Prefer jumping directly to marks
nnoremap ' `
xnoremap ' `
onoremap ' `
nnoremap ` '
xnoremap ` '
onoremap ` '

" Yank until EOL; matches the behavior of C and D
nnoremap Y y$

" Another way to search
nmap Q g*
xmap Q *

" Print the number of matches
nnoremap <Leader>N :let view = winsaveview() \| :%s///ng \| call winrestview(view)<CR>

" "Upward J"
nnoremap K kJ
xnoremap K kJ

" Black hole register
nnoremap \ "_
xnoremap \ "_

" Remain in visual mode after shifting lines
xnoremap < <gv
xnoremap > >gv

" Write file, only if buffer has been modified
nnoremap <Leader><CR> :update<CR>

" Re-edit current file, e.g. to discard unsaved changes
nnoremap <Leader>e :let view = winsaveview() \| edit! \| call winrestview(view)<CR>

" "ZZ all" and quit vim with a non-zero exit code, respectively
nnoremap ZA :xall<CR>
nnoremap ZC :cquit<CR>

" Redraw the screen, in case something went wrong
nnoremap <Leader>r :redraw!<CR>

" Create and delete buffers
nnoremap <Leader>s :new<CR>
nnoremap <Leader>S :leftabove new<CR>
nnoremap <Leader>v :vnew<CR>
nnoremap <Leader>V :leftabove vnew<CR>
nnoremap <Leader>c :bdelete<CR>
nnoremap <Leader>C :bdelete!<CR>

" Navigate and close windows
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-c> <C-w>c

" Jump to tag under cursor in split window
nnoremap <C-\> <C-w><C-]>
xnoremap <C-\> <C-w><C-]>
nnoremap g<C-\> <C-w>g<C-]>
xnoremap g<C-\> <C-w>g<C-]>

" Remove all trailing whitespace
nnoremap <Leader>w :keeppatterns %s/\s\+$//<CR>

" Match all characters past column 72, 80, 100, or 120
nmap <Leader>7 /\%73c.\+<CR>
nmap <Leader>8 /\%81c.\+<CR>
nmap <Leader>1 /\%101c.\+<CR>
nmap <Leader>2 /\%121c.\+<CR>

" Set textwidth (h for hard wrap) to 72, 80, 100, 120, or none
nnoremap yoh7 :setlocal textwidth=72<CR>
nnoremap yoh8 :setlocal textwidth=80<CR>
nnoremap yoh1 :setlocal textwidth=100<CR>
nnoremap yoh2 :setlocal textwidth=120<CR>
nnoremap yoh0 :setlocal textwidth=0<CR>

" Yank file name, or only the dir (head), or only the base (tail)
nnoremap <Leader>yf :let @+ = expand('%') \| echomsg 'copied: ' .. @+<CR>
nnoremap <Leader>yd :let @+ = expand('%:h') \| echomsg 'copied: ' .. @+<CR>
nnoremap <Leader>yb :let @+ = expand('%:t') \| echomsg 'copied: ' .. @+<CR>

" Load filetype plugins and indentation files
filetype plugin indent on

if has('autocmd')
  augroup vimrc
    " Remove all autocommands from this group
    autocmd!

    " Resize windows when vim is resized
    autocmd VimResized * wincmd =

    " Open read-only when swap file exists
    autocmd SwapExists * let v:swapchoice = 'o'

    " Revert to global wrap setting in diff mode
    autocmd FilterWritePre * if &diff | setlocal wrap< | endif

    " Consistent formatoptions across filetypes
    autocmd Filetype * setlocal formatoptions=tcqj

    " Turn on spell checking for git commits
    autocmd FileType gitcommit setlocal spell

    " Fix comment templates
    autocmd FileType c setlocal commentstring=//%s
    autocmd FileType gitconfig setlocal commentstring=#%s
    autocmd FileType markdown setlocal commentstring=<!--%s-->
    autocmd FileType sbt setlocal commentstring=//%s
    autocmd FileType sql setlocal commentstring=--%s

    " Style
    autocmd FileType java,scala setlocal textwidth=100
    autocmd Filetype scala let b:argwrap_wrap_closing_brace = 1

    " Hide fzf statusline
    autocmd FileType fzf set laststatus=0 | autocmd BufLeave <buffer> set laststatus=2

    " Disable `airblade/vim-gitgutter` for large files
    autocmd BufEnter * if line('$') >= 10000 | GitGutterBufferDisable | endif
    " For consistency with colorscheme
    autocmd ColorScheme * hi! link GitGutterAdd Function
                        \ | hi! link GitGutterChange String
                        \ | hi! link GitGutterDelete Statement
  augroup end
endif

if filereadable(expand('~/.vim/autoload/plug.vim'))
  call plug#begin()

  " Colors
  Plug 'nkouevda/vim-material'
  Plug 'mechatroner/rainbow_csv'

  " Various useful commands and functions
  Plug 'rhysd/conflict-marker.vim'
  Plug 'wellle/targets.vim'
  Plug 'tpope/vim-abolish'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-repeat'
  Plug 'christoomey/vim-sort-motion'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'

  " Argument wrapping
  let g:argwrap_wrap_closing_brace = 0
  Plug 'FooSoft/vim-argwrap'
  nnoremap <Leader>a :ArgWrap<CR>

  " Fuzzy search for files, buffers, etc.
  function! s:fzf_location_list(lines)
    call setloclist(0, map(copy(a:lines), '{ "filename": v:val }'))
    lopen
    lfirst
  endfunction
  let g:fzf_action = {
    \ 'ctrl-l': function('s:fzf_location_list'),
    \ 'ctrl-s': 'split',
    \ 'ctrl-v': 'vsplit',
    \ }
  let g:fzf_layout = { 'down': '70%' }
  let g:fzf_history_dir = '~/.cache/fzf/history'
  Plug 'junegunn/fzf'
  let g:fzf_vim = {}
  let g:fzf_vim.buffers_jump = 1
  let g:fzf_vim.listproc = { list -> fzf#vim#listproc#location(list) }
  let g:fzf_vim.preview_window = []
  Plug 'junegunn/fzf.vim'
  nnoremap <Leader>b :Buffers<CR>
  nnoremap <Leader>h :History<CR>
  nnoremap <Leader>t :Tags<CR>

  " Like default `:Files`, plus allow switching between `git ls-files` and `rg --files`
  command -bang -nargs=* Files call fzf#vim#files(
    \ <q-args>,
    \ fzf#vim#with_preview({ 'options': $FZF_CTRL_T_OPTS }),
    \ <bang>0)
  nnoremap <Leader>f :Files<CR>
  nnoremap <expr> <Leader>d ':Files ' .. expand('%:p:h') .. '<CR>'

  " Like default `:Rg`, but `--reverse`
  command -bang -nargs=* Rg call fzf#vim#grep(
    \ 'rg --no-heading --line-number --column --color=always -- ' .. shellescape(<q-args>),
    \ fzf#vim#with_preview({ 'options': '--reverse' }),
    \ <bang>0)
  nnoremap <Leader>Q :Rg<CR>
  nnoremap <Leader>q :Rg <C-r><C-w><CR>
  xnoremap <Leader>q y:Rg <C-r>"<CR>
  nnoremap <Leader>* :Rg \b<C-r><C-w>\b<CR>
  xnoremap <Leader>* y:Rg \b<C-r>"\b<CR>

  " `git diff --name-only` and variants: `--cached`, `HEAD^`, `merge-base main HEAD`
  nnoremap <Leader>gn :call fzf#run(fzf#wrap('files', { 'source': 'git dfn' }))<CR>
  nnoremap <Leader>gc :call fzf#run(fzf#wrap('files', { 'source': 'git dfnc' }))<CR>
  nnoremap <Leader>g1 :call fzf#run(fzf#wrap('files', { 'source': 'git dfn1' }))<CR>
  nnoremap <Leader>gm :call fzf#run(fzf#wrap('files', { 'source': 'git dfnm' }))<CR>

  " Git commands
  Plug 'tpope/vim-fugitive'
  nnoremap <Leader>gb :Git blame<CR>
  nnoremap <Leader>g_b :,Git blame<CR>
  nnoremap <Leader>gd :Git diff %<CR>
  nnoremap <Leader>gD :Git diff HEAD^ %<CR>

  " Git signs
  let g:gitgutter_diff_base = 'HEAD^'
  let g:gitgutter_map_keys = 0
  Plug 'airblade/vim-gitgutter'
  nmap [c <Plug>(GitGutterPrevHunk)
  nmap ]c <Plug>(GitGutterNextHunk)
  nnoremap <Leader>ggh :let g:gitgutter_diff_base = 'HEAD'<CR>
  nnoremap <Leader>gg1 :let g:gitgutter_diff_base = 'HEAD^'<CR>
  nnoremap <Leader>ggm :let g:gitgutter_diff_base = '"$(git mbm)"'<CR>

  " GitHub links
  Plug 'knsh14/vim-github-link'
  nnoremap <Leader>yg :GetCurrentCommitLink<CR>
  xnoremap <Leader>yg :GetCurrentCommitLink<CR>

  " Indentation detection
  Plug 'tpope/vim-sleuth'

  " netrw
  let g:netrw_liststyle = 3
  Plug 'tpope/vim-vinegar'

  " Search
  Plug 'nkouevda/vim-slash', { 'branch': 'nk/topline' }

  " Snippets
  if has('python3')
    let g:UltiSnipsExpandTrigger = '<Tab>'
    let g:UltiSnipsJumpForwardTrigger = '<Tab>'
    let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'
    Plug 'SirVer/ultisnips'
  endif

  " Syntax highlighting
  if has('python') || has('python3')
    Plug 'Valloric/MatchTagAlways'
  endif
  Plug 'jrozner/vim-antlr'
  Plug 'bazelbuild/vim-ft-bzl'
  Plug 'hashivim/vim-terraform'
  Plug 'nkouevda/vim-thrift-syntax'

  call plug#end()
endif

" Enable syntax highlighting
syntax enable

try
  colorscheme material
catch /^Vim(colorscheme):/
endtry

if filereadable(expand('~/.vim/vimrc.local'))
  source ~/.vim/vimrc.local
endif
